server:
  port: 9007

spring:
  application:
    name: sv-hystrix
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest

# feign中启用Hystrix
feign:
  httpclient:
    enabled: true
  hystrix:
    enabled: true
#熔断器超时时间设置
hystrix:
  threadpool:
    default:
      coreSize: 1
      maximumSize: 100
      allowMaximumSizeToDivergeFromCoreSize: true
      # 配置queue size 将导致maximumSize allowMaximumSizeToDivergeFromCoreSize失效
      # hystrix超过coreSize直接进入queue
      #maxQueueSize: 512
      #queueSizeRejectionThreshold: 512
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 1000
      circuitBreaker:
        requestVolumeThreshold: 2
    # feign config command key this way ,see code blow
    # SimpleClassName#simpleMethodName(ParamClassName)
    # source code : feign.Feign#configKey(java.lang.Class, java.lang.reflect.Method)
    HellStub#hell(HellReq):
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 30000
      circuitBreaker:
        requestVolumeThreshold: 2
    # rest template custom command key
    hystrix-command-a:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 1000
      circuitBreaker:
        requestVolumeThreshold: 2
    hystrix-command-b:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 2000
      circuitBreaker:
        requestVolumeThreshold: 2
    rest-server:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 10000
ribbon:
  MaxConnectionsPerHost: 1000
  MaxTotalConnections: 3000
  ReadTimeout: 10000
  ConnectTimeout: 100
  MaxAutoRetries: 0
  MaxAutoRetriesNextServer: 0
  ServerListRefreshInterval: 5000
  # eager load clients,
  eager-load:
    enabled: true
    clients: rest-server
# ribbon using feign client name as "command key" it is not working
"HellStub2#hell2(HellReq)":
  ribbon:
    MaxConnectionsPerHost: 1000
    MaxTotalConnections: 3000
    ReadTimeout: 20000
    ConnectTimeout: 10000
    MaxAutoRetries: 0
    MaxAutoRetriesNextServer: 0

management:
  security:
    enabled: false
  health:
    mail:
      enabled: false
# eureka configuration
eureka:
  client:
    healthcheck:
       enabled: false
    registry-fetch-interval-seconds: 5 #更新eureka时间 默认30秒
    serviceUrl:
      defaultZone: http://localhost:9000/eureka/
  instance:
    lease-renewal-interval-in-seconds: 5 #租期更新时间间隔R（默认30秒）
    lease-expiration-duration-in-seconds: 15  #租期到期时间（默认90秒）
    metadata-map:
      cluster: main
    prefer-ip-address: true
    instance-id: ${spring.cloud.client.ipAddress}:${server.port}